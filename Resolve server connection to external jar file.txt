This file is for Java Spring boot connenction to server: (Astro project Server problem file)


This is resolve external dependencies on server : If you some external depenceies so , you to call first those jar file into  lib folder then, add depencies on pom.xml file  as per below :

-----------------------
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.3.2</version>
		<relativePath />
	</parent>
	<groupId>com.astro</groupId>
	<artifactId>astroworldspring</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>astroworldspring</name>
	<description>Astroworld project for Spring Boot</description>

	<properties>
		<java.version>17</java.version>
		<suntimes.version>1.0</suntimes.version>
		<swisseph.version>2.00.00-01</swisseph.version>
		<libs.dir>${project.basedir}/libs</libs.dir>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.json</groupId>
			<artifactId>json</artifactId>
			<version>20210307</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-tomcat</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.astro.astroworldspring</groupId>
			<artifactId>suntimes</artifactId>
			<version>${suntimes.version}</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>com.astro.astroworldspring</groupId>
			<artifactId>swisseph</artifactId>
			<version>${swisseph.version}</version>
			<scope>compile</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>
					<execution>
						<id>copy-dependencies</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}/libs</outputDirectory>
							<includeScope>compile</includeScope>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<mainClass>com.astro.astroworldspring.AstroworldspringApplication</mainClass>
					<includeSystemScope>true</includeSystemScope>
					<layout>ZIP</layout>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>repackage</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
</project>
--------------------

then , Maven clean  and Maven install for build 

then upload that jar file directly on to server ec2 at any folder:

1) Run the following command to start the Spring Boot app in the background:
nohup java -jar astroworldspring-0.0.1-SNAPSHOT.jar > output.log 2>&1 &

nohup ensures the app keeps running even after you close the terminal.
output.log will store the logs of your application.
The & at the end runs the process in the background.

2)You can check the logs by viewing output.log:
tail -f output.log

